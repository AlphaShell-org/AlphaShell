let a = 5;
export b = 3 + 2;
let person = "John";

//let people = ["John", "Peter"]; // array
//let map = { foo: "bar" }; // associative array (dict)

// a = 10;

printf(a);
//printf(people[0]);
//printf(map["foo"]);
//printf($(a + b)); // interpret + as arithmetic instead of concatenation

//if a <= 10 { printf("Larger than 10"); }

for a in 0..5 { printf(a); } // start..end[..step]
for a in 0..10..2 { printf(a); }
// for word in ["hello", "world"] { printf(word); }
for person in people { printf(person); }

/*
let x = 0;
while x < 10 { printf(x); }
*/

fn hello(name, age) {
//  printf(f"Hello {name} aged {age}");
  printf("Hello {name} aged {age}");
}

hello("John", 25) | wc(); // pipe output

fn arrayFunction() {
  for a in @ { // $ is args array
    // a | sed("s/foo/bar") // pipe value
  }
  return 0;
}

/*
let string = "abcb";
if matched ~= "abc{2,5}" { // regex matching
  printf("matched");
} elif "abcb" ~= "a[bc]{3,}" {
  printf("matched elif");
} else {
  printf("not matched");
}
*/

firefox("google.com") &; // run binary as a daemon

import "dist/test2.zjs"; // transpile time import - similar to `#include`

source "another_folder/file.zjs"; // runtime import, just like source in zsh
