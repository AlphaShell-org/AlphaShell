Declaration(Declaration { type: Let, name: "a", value: Value(Raw(Int(5))) })
Declaration(Declaration { type: Export, name: "b", value: Value(Expression(Expression { left: Raw(Int(3)), operator: Add, right: Raw(Int(2)) })) })
Declaration(Declaration { type: Let, name: "person", value: Value(Raw(String("John"))) })
FunctionCall(FunctionCall { name: "printf", args: [Value(Raw(Identifier("a")))], is_daemon: false, next: None })
For(For { start: 0, end: 5, step: 1, variable: "a", block: Block([FunctionCall(FunctionCall { name: "printf", args: [Value(Raw(Identifier("a")))], is_daemon: false, next: None })]) })
For(For { start: 0, end: 10, step: 2, variable: "a", block: Block([FunctionCall(FunctionCall { name: "printf", args: [Value(Raw(Identifier("a")))], is_daemon: false, next: None })]) })
Foreach(Foreach { variable: "person", iterable: Value(Raw(Identifier("people"))), block: Block([FunctionCall(FunctionCall { name: "printf", args: [Value(Raw(Identifier("person")))], is_daemon: false, next: None })]) })
Function(Function { name: "hello", params: ["name", "age"], block: Block([FunctionCall(FunctionCall { name: "printf", args: [Value(Raw(String("Hello {name} aged {age}")))], is_daemon: false, next: None })]) })
FunctionCall(FunctionCall { name: "hello", args: [Value(Raw(String("John"))), Value(Raw(Int(25)))], is_daemon: false, next: Some(Call(FunctionCall(FunctionCall { name: "wc", args: [], is_daemon: false, next: None }))) })
Function(Function { name: "arrayFunction", params: [], block: Block([Foreach(Foreach { variable: "a", iterable: Value(Raw(Identifier("@"))), block: Block([]) }), Return(0)]) })
FunctionCall(FunctionCall { name: "firefox", args: [Value(Raw(String("google.com")))], is_daemon: true, next: None })
ImportedCode([Block([FunctionCall(FunctionCall { name: "printf", args: [Value(Raw(String("loaded test2")))], is_daemon: false, next: None }), Function(Function { name: "test2", params: [], block: Block([For(For { start: 0, end: 3, step: 1, variable: "i", block: Block([FunctionCall(FunctionCall { name: "echo", args: [Value(Raw(String("Hello from test")))], is_daemon: false, next: Some(Call(FunctionCall(FunctionCall { name: "lolcat", args: [], is_daemon: false, next: None }))) })]) })]) })])])
Import(["another_folder/file.zjs"])
